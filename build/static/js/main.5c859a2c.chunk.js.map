{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sOAYeA,EAVF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAKC,EAAuB,EAAvBA,iBACbC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBCNpCK,EAAU,2DAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAAQM,GACpBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAGF,GAEf,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAKF,GAC9BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCVvCK,G,MAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAM,QACNC,UAAU,SACVC,SAAS,KAKP,6BACA,wGA+FSC,EA1FH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,KAKhBC,qBAAU,WACRC,QAAQC,IAAI,UACZC,IAEGvB,MAAK,SAAAwB,GACJT,EAASS,QAEZ,IAEHH,QAAQC,IAAI,SAAUR,EAAMW,OAAQ,SAEpC,IAuBMC,EAAcR,EAChBJ,EACAA,EAAMa,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAoB9B,OACE,6BACE,qCACA,6BACE,4BAAQG,QAAS,kBAAMuB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGQ,EAAYE,KAAI,SAACtC,EAAMuC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBA/BD,SAACc,GAE1B,IAAMf,EAAOwB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAOA,KAChC4B,EAAW,2BAAO3C,GAAP,IAAYG,WAAYH,EAAKG,YAE/C8B,EACQlB,EAAG4B,GACVjC,MAAK,SAAAkC,GACJnB,EAASD,EAAMc,KAAI,SAAAtC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAK4C,SAElDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACU/C,EAAKK,QADf,sCAGLoB,EAASD,EAAMa,QAAO,SAAAK,GAAC,OAAIA,EAAE3B,KAAOA,SAiBLiC,CAAmBhD,EAAKe,WAItD,0BAAMkC,SA9DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB/C,QAASqB,EACT2B,MAAM,IAAIC,MAAOC,cACjBpD,UAAWqD,KAAKC,SAAW,IAI7BxB,EACQmB,GACP1C,MAAK,SAAAkC,GACJnB,EAASD,EAAMkC,OAAOd,IACtBjB,EAAW,SAkDT,2BACEgC,MAAOjC,EACPkC,SA/CiB,SAACV,GACxBnB,QAAQC,IAAIkB,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UA+CpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,QCrGNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.5c859a2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note,toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'> \r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\nconst baseUrl = 'https://fathomless-caverns-76110.herokuapp.com/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id,newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    create,\r\n    update\r\n}","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Footer = () => {\n  const footerStyle = {\n    color:'green',\n    fontStyle:'italic',\n    fontSize:16\n  }\n\n  return(\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([]) \n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  console.log('render', notes.length, 'notes')\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      \n    }\n\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n  \n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const toggleImportanceOf = (id) =>{\n    \n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note,important: !note.important}\n\n   noteService\n   .update(id,changedNote)\n   .then(returnedNote => {\n     setNotes(notes.map(note => note.id !== id ? note:returnedNote))\n   })\n   .catch(error => {\n     alert(\n       `the note '${note.content}' was already deleted from server`\n     )\n     setNotes(notes.filter(n => n.id !== id))\n   })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>      \n      <ul>\n        {notesToShow.map((note, i) => \n          <Note \n            key={i} \n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>   \n      <Footer />\n    </div>\n  )\n}\n\nexport default App ","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}